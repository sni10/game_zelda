
services:

  # ðŸŽ® Zelda-like Game Application
  zelda-game:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  # For potential web interface or API
    networks:
      - game_network
    environment:
      PYTHONPATH: /app/src
      SDL_VIDEODRIVER: dummy  # For headless mode
    volumes:
      - .:/app
      - game-data:/app/data
    working_dir: /app
    command: python main.py
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "from src.core.config_loader import load_config; load_config(); print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ðŸ§ª Game Test Runner (for development)
  game-tests:
    build:
      context: .
      dockerfile: docker/test/Dockerfile.test
    networks:
      - game_network
    environment:
      PYTHONPATH: /app/src
      PYTEST_CURRENT_TEST: 1
      SDL_VIDEODRIVER: dummy
      DISPLAY: :99
    volumes:
      - .:/app
      - test-coverage:/app/coverage
    working_dir: /app
    profiles: ["testing"]  # Only run when explicitly requested
    command: >
      sh -c "
        echo 'ðŸŽ® Starting Zelda Game Tests...' &&
        echo 'ðŸ”§ Setting up virtual display...' &&
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 2 &&
        echo 'ðŸ§ª Running all game tests...' &&
        pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing
      "

volumes:
  game-data:
  test-coverage:

networks:
  game_network:
    driver: bridge
    name: zelda_game_network