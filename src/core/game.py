import pygame
import sys
import os
import datetime
from src.core.config_loader import load_config, get_config, get_color
from src.core.game_states import GameState
from src.core.game_stats import GameStats
from src.ui.menu import MainMenu
from src.ui.game_over import GameOverScreen
from src.utils.debug import debug
from src.entities.player import Player
from src.world.world import World
from src.systems.save_system import SaveSystem

# –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∏—Ä–æ–≤
from src.core.ecs.entity import EntityManager
from src.core.ecs.system import SystemManager, ZTransitionSystem, PortalSystem
from src.core.ecs.component import PositionComponent, RenderLayerComponent, ZLevelComponent, PortalComponent
from src.rendering.layer_renderer import LayerRenderer
from src.world.world_manager import WorldManager
from src.systems.multiworld_save_system import MultiWorldSaveSystem


class Game:
    def __init__(self):
        # –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config = load_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame
        pygame.init()
        self.screen = pygame.display.set_mode((get_config('WIDTH'), get_config('HEIGHT')))
        pygame.display.set_caption("Zelda-like Game")
        self.clock = pygame.time.Clock()
        self.running = True
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        self.state = GameState.MENU
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.menu = MainMenu()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ECS —Å–∏—Å—Ç–µ–º—ã
        self.entity_manager = EntityManager()
        self.system_manager = SystemManager(self.entity_manager)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        self.layer_renderer = LayerRenderer(self.entity_manager, self.screen)
        self.system_manager.add_system(self.layer_renderer)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        z_transition_system = ZTransitionSystem(self.entity_manager)
        portal_system = PortalSystem(self.entity_manager)
        self.system_manager.add_system(z_transition_system)
        self.system_manager.add_system(portal_system)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–∏—Ä–æ–≤
        self.world_manager = WorldManager(
            self.entity_manager,
            self.system_manager,
            self.layer_renderer
        )
        
        # –ò–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã)
        self.world = None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.player = None
        self.player_entity = None  # ECS —Å—É—â–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
        self.game_stats = None
        self.game_over_screen = None
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        self.last_time = pygame.time.get_ticks()
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.show_debug = False
        
        # –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π (—Å—Ç–∞—Ä–∞—è –∏ –Ω–æ–≤–∞—è)
        self.save_system = SaveSystem()
        self.multiworld_save_system = MultiWorldSaveSystem(self.entity_manager, self.world_manager)
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –º–∏—Ä–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        self.legacy_worlds = {}

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª—ã"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = "logs"
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        self.log_filename = os.path.join(log_dir, f"game_session_{timestamp}.log")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
        self.log_file = open(self.log_filename, 'w', encoding='utf-8')
        self.log_file.write(f"=== –ò–ì–†–û–í–ê–Ø –°–ï–°–°–ò–Ø –ù–ê–ß–ê–õ–ê–°–¨: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===\n\n")
        self.log_file.flush()

        print(f"üìù –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤: {self.log_filename}")

    def log(self, message, level="INFO"):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª"""
        timestamp = datetime.datetime.now().strftime("%H:%M:%S.%f")[:-3]  # –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        log_entry = f"[{timestamp}] [{level}] {message}\n"

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        self.log_file.write(log_entry)
        self.log_file.flush()

        # –î—É–±–ª–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if level in ["IMPORTANT", "ERROR", "WARNING"]:
            print(f"{message}")

    def _get_or_create_legacy_world(self, world_id: str) -> World:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å '—Å—Ç–∞—Ä—ã–π' –º–∏—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞"""
        if world_id not in self.legacy_worlds:
            map_filename = f"{world_id}.txt"
            map_file_path = os.path.join('data', map_filename)

            # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            if not os.path.exists(map_file_path):
                self.log(f"–ö–∞—Ä—Ç–∞ '{map_filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'main_world.txt'", "WARNING")
                map_file_path = os.path.join('data', 'main_world.txt')

            self.log(f"–°–æ–∑–¥–∞–Ω–∏–µ legacy world '{world_id}' –∏–∑ —Ñ–∞–π–ª–∞ '{map_file_path}'")
            self.legacy_worlds[world_id] = World(map_file=map_file_path)

        return self.legacy_worlds[world_id]

    def start_new_game(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
        self.log("=== –ó–ê–ü–£–°–ö –ù–û–í–û–ô –ò–ì–†–´ ===", "IMPORTANT")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –º–∏—Ä–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.world = self._get_or_create_legacy_world("main_world")
        player_start_x, player_start_y = self.world.get_player_start_position()
        self.log(f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞: ({player_start_x}, {player_start_y})")

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∏—Ä–æ–≤ —á–µ—Ä–µ–∑ WorldManager
        self.log("–°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∏—Ä–æ–≤...")

        # –û—Å–Ω–æ–≤–Ω–æ–π –º–∏—Ä
        success = self.world_manager.create_world("main", "main_world", 
                                                 (get_config('WORLD_WIDTH'), get_config('WORLD_HEIGHT')))
        if success:
            self.log("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –º–∏—Ä —Å–æ–∑–¥–∞–Ω", "IMPORTANT")
        else:
            self.log("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∏—Ä–∞!", "ERROR")

        # –ú–∏—Ä-–ø–µ—â–µ—Ä–∞ —Å —Ç–æ–Ω–Ω–µ–ª—è–º–∏
        success = self.world_manager.create_world("cave", "cave_world", (800, 600))
        if success:
            self.log("‚úÖ –ú–∏—Ä-–ø–µ—â–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω", "IMPORTANT")
        else:
            self.log("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏—Ä–∞-–ø–µ—â–µ—Ä—ã!", "ERROR")

        # –ü–æ–¥–∑–µ–º–Ω—ã–π –º–∏—Ä
        success = self.world_manager.create_world("underground", "underground_world", (600, 400))
        if success:
            self.log("‚úÖ –ü–æ–¥–∑–µ–º–Ω—ã–π –º–∏—Ä —Å–æ–∑–¥–∞–Ω", "IMPORTANT")
        else:
            self.log("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∑–µ–º–Ω–æ–≥–æ –º–∏—Ä–∞!", "ERROR")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ Player –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.player = Player(player_start_x, player_start_y)
        self.log(f"–ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω: HP={self.player.health}/{self.player.max_health}")

        # –°–æ–∑–¥–∞–Ω–∏–µ ECS —Å—É—â–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
        self.player_entity = self.entity_manager.create_entity()
        self.player_entity.add_component(PositionComponent(player_start_x, player_start_y, 0, "main_world"))
        self.player_entity.add_component(RenderLayerComponent(0))
        self.player_entity.add_component(ZLevelComponent(0))
        self.log(f"ECS —Å—É—â–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID={id(self.player_entity)}")

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∏—Ä
        self.world_manager.switch_to_world("main_world", self.player_entity)

        current_world = self.world_manager.get_current_world()
        if current_world:
            self.log(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –º–∏—Ä: {current_world.world_id}", "IMPORTANT")
        else:
            self.log("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–∏–π –º–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", "ERROR")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã
        self.game_stats = GameStats()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Game Over —ç–∫—Ä–∞–Ω–∞
        self.game_over_screen = GameOverScreen(
            get_config('WIDTH'), 
            get_config('HEIGHT'), 
            self.game_stats
        )
        
        print("–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∏—Ä–æ–≤!")
        print("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: WASD - –¥–≤–∏–∂–µ–Ω–∏–µ, E - Z-–ø–µ—Ä–µ—Ö–æ–¥—ã, P - –ø–æ—Ä—Ç–∞–ª—ã, 1,2,3 - —Å–º–µ–Ω–∞ –º–∏—Ä–æ–≤")
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state = GameState.PLAYING

    def handle_events(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
            elif event.type == pygame.KEYDOWN:
                if self.state == GameState.MENU:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ –º–µ–Ω—é
                    action = self.menu.handle_input(event)
                    if action == "new_game":
                        self.start_new_game()
                    elif action == "continue_game":
                        # –ó–∞–≥—Ä—É–∑–∫–∞ quicksave
                        self.quickload()
                    elif action == "load_game":
                        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –ø—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Issue #16
                        print("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É - —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ Issue #16")
                        # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
                        self.start_new_game()
                    elif action == "exit":
                        self.running = False
                elif self.state == GameState.PLAYING:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ –∏–≥—Ä–µ
                    if event.key == pygame.K_F1:
                        self.show_debug = not self.show_debug
                    elif event.key == pygame.K_F5:
                        # –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                        self.quicksave()
                    elif event.key == pygame.K_F9:
                        # –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                        self.quickload()
                    elif event.key == pygame.K_ESCAPE:
                        self.state = GameState.MENU
                    
                    # –ù–æ–≤—ã–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∏—Ä–æ–≤
                    elif event.key == pygame.K_e:
                        self.log("‚ö° [E] Z-–ø–µ—Ä–µ—Ö–æ–¥", "IMPORTANT")
                        self.handle_z_transition()
                    elif event.key == pygame.K_p:
                        self.log("üåÄ [P] –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Ä—Ç–∞–ª–∞", "IMPORTANT")
                        self.handle_portal_activation()
                    elif event.key == pygame.K_1:
                        self.log("üåç [1] -> –û—Å–Ω–æ–≤–Ω–æ–π –º–∏—Ä", "IMPORTANT")
                        success = self.world_manager.switch_to_world("main_world", self.player_entity)
                        if success:
                            self.world = self._get_or_create_legacy_world("main_world")
                            self.sync_player_position()
                        else:
                            self.log("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∏—Ä!", "ERROR")
                    elif event.key == pygame.K_2:
                        self.log("üï≥Ô∏è [2] -> –ú–∏—Ä-–ø–µ—â–µ—Ä–∞", "IMPORTANT")
                        success = self.world_manager.switch_to_world("cave_world", self.player_entity)
                        if success:
                            self.world = self._get_or_create_legacy_world("cave_world")
                            self.sync_player_position()
                        else:
                            self.log("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–∏—Ä-–ø–µ—â–µ—Ä—É!", "ERROR")
                    elif event.key == pygame.K_3:
                        self.log("‚õèÔ∏è [3] -> –ü–æ–¥–∑–µ–º–Ω—ã–π –º–∏—Ä", "IMPORTANT")
                        success = self.world_manager.switch_to_world("underground_world", self.player_entity)
                        if success:
                            self.world = self._get_or_create_legacy_world("underground_world")
                            self.sync_player_position()
                        else:
                            self.log("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø–æ–¥–∑–µ–º–Ω—ã–π –º–∏—Ä!", "ERROR")
                elif self.state == GameState.GAME_OVER:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ Game Over
                    if self.game_over_screen:
                        action = self.game_over_screen.handle_input(event)
                        if action == "MENU":
                            self.state = GameState.MENU
                        elif action == "QUIT":
                            self.running = False

    def handle_z_transition(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É Z-—É—Ä–æ–≤–Ω—è–º–∏"""
        print("   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ECS —Å—É—â–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞...")
        if not self.player_entity:
            print("   ‚ùå ECS —Å—É—â–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            return

        player_pos = self.player_entity.get_component(PositionComponent)
        z_comp = self.player_entity.get_component(ZLevelComponent)

        if not player_pos or not z_comp:
            print("   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ Z-—É—Ä–æ–≤–Ω—è!")
            return

        print(f"   üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ({player_pos.x}, {player_pos.y}), Z={player_pos.z}")

        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –º–µ–∂–¥—É Z=0 –∏ Z=-1
        current_z = player_pos.z
        target_z = -1 if current_z == 0 else 0
        print(f"   üéØ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ Z: {current_z} -> {target_z}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –º–∏—Ä–µ —Å —Ç–æ–Ω–Ω–µ–ª—è–º–∏
        current_world = self.world_manager.get_current_world()
        print(f"   üåç –¢–µ–∫—É—â–∏–π –º–∏—Ä: {current_world.world_id if current_world else 'None'}")

        if current_world:
            print(f"   ‚úÖ –ú–∏—Ä {current_world.world_id} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Z-–ø–µ—Ä–µ—Ö–æ–¥—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º...")
            # –¢–µ–ø–µ—Ä—å Z-–ø–µ—Ä–µ—Ö–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤–æ –≤—Å–µ—Ö –º–∏—Ä–∞—Ö
            success = self.world_manager.handle_z_transition(self.player_entity, target_z)
            if success:
                self.layer_renderer.set_player_z_level(target_z)
                self.sync_player_position()
                print(f"   ‚úÖ Z-–ø–µ—Ä–µ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω: {current_z} -> {target_z}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–æ–π —Ä–µ–∂–∏–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
                if target_z == -1:
                    print("   üï≥Ô∏è  –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ü–ï–©–ï–†–´")
                else:
                    print("   üåç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ü–û–í–ï–†–•–ù–û–°–¢–ò")
            else:
                print("   ‚ùå Z-–ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è - –æ—à–∏–±–∫–∞ WorldManager")
        else:
            print("   ‚ùå –¢–µ–∫—É—â–∏–π –º–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω - Z-–ø–µ—Ä–µ—Ö–æ–¥—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã")
            
    def handle_portal_activation(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞–ª–∞"""
        if not self.player_entity:
            return
            
        player_pos = self.player_entity.get_component(PositionComponent)
        if not player_pos:
            return
            
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–æ—Ä—Ç–∞–ª
        current_world_entities = self.world_manager.get_current_world_entities()
        
        for entity in current_world_entities:
            if entity.has_component(PortalComponent):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–æ—Ä—Ç–∞–ª–∞
                portal_pos = entity.get_component(PositionComponent)
                if portal_pos:
                    dx = player_pos.x - portal_pos.x
                    dy = player_pos.y - portal_pos.y
                    distance = (dx * dx + dy * dy) ** 0.5
                    
                    if distance <= 64:  # –†–∞–¥–∏—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞–ª–∞
                        success = self.world_manager.handle_portal_activation(entity, self.player_entity)
                        if success:
                            self.sync_player_position()
                            print(f"–ü–æ—Ä—Ç–∞–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–µ—Ä–µ—Ö–æ–¥ –≤ {player_pos.world_id}")
                            return
                            
        print("–ü–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç –ø–æ—Ä—Ç–∞–ª–∞")
        
    def sync_player_position(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç–∞—Ä—ã–º Player –∏ ECS —Å—É—â–Ω–æ—Å—Ç—å—é"""
        if not self.player or not self.player_entity:
            return
            
        player_pos = self.player_entity.get_component(PositionComponent)
        if player_pos:
            print(f"   üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏: ECS({player_pos.x}, {player_pos.y}) -> Player({self.player.x}, {self.player.y})")

            # –í–ê–ñ–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
            # –ï—Å–ª–∏ ECS –ø–æ–∑–∏—Ü–∏—è (0,0) –Ω–æ Player –∏–º–µ–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º Player
            if player_pos.x == 0 and player_pos.y == 0 and (self.player.x != 0 or self.player.y != 0):
                print(f"   ‚ö†Ô∏è  ECS —Å—É—â–Ω–æ—Å—Ç—å –≤ (0,0), –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ Player: ({self.player.x}, {self.player.y})")
                player_pos.set_position(self.player.x, self.player.y)
            else:
                # –û–±—ã—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ECS -> Player
                self.player.x = player_pos.x
                self.player.y = player_pos.y
                self.player.rect.x = int(player_pos.x)
                self.player.rect.y = int(player_pos.y)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É
            if self.world:
                self.world.update_camera(
                    self.player.x + self.player.width // 2,
                    self.player.y + self.player.height // 2,
                    get_config('WIDTH'), get_config('HEIGHT')
                )

    def update(self, dt):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏"""
        if self.state == GameState.PLAYING and self.player and self.world:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏ –∏–≥—Ä–æ–∫–∞
            if self.player.is_dead():
                self.game_stats.record_death()
                self.state = GameState.GAME_OVER
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∞–≤–∏—à
            keys = pygame.key.get_pressed()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
            self.player.handle_input(keys)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ (–∫–æ–ª–ª–∏–∑–∏–∏ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ player.update)
            self.player.update(dt, self.world, self.game_stats)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ ECS —Å—É—â–Ω–æ—Å—Ç–∏ —Å Player –æ–±—ä–µ–∫—Ç–æ–º
            if self.player_entity:
                player_pos = self.player_entity.get_component(PositionComponent)
                if player_pos:
                    player_pos.set_position(self.player.x, self.player.y)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ WorldManager –∏ ECS —Å–∏—Å—Ç–µ–º
            self.world_manager.update(dt)
            self.system_manager.update_all(dt)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –¥–ª—è LayerRenderer
            if self.player_entity:
                player_pos = self.player_entity.get_component(PositionComponent)
                if player_pos:
                    self.layer_renderer.set_camera(
                        player_pos.x - get_config('WIDTH') // 2,
                        player_pos.y - get_config('HEIGHT') // 2
                    )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if self.game_stats:
                self.game_stats.update_position(self.player.x, self.player.y)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ World (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            self.world.update_camera(
                self.player.x + self.player.width // 2,
                self.player.y + self.player.height // 2,
                get_config('WIDTH'), get_config('HEIGHT')
            )

    def draw(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä—ã"""
        if self.state == GameState.MENU:
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ–Ω—é
            self.menu.draw(self.screen)
        elif self.state == GameState.PLAYING and self.player and self.world:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            player_pos = self.player_entity.get_component(PositionComponent) if self.player_entity else None
            current_world = self.world_manager.get_current_world()

            # –£–±–∏—Ä–∞–µ–º —á–∞—Å—Ç—ã–µ –ª–æ–≥–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–æ–≤
            render_mode = "SURFACE" if (not player_pos or player_pos.z == 0) else "CAVE"

            if not hasattr(self, '_last_render_mode') or self._last_render_mode != render_mode:
                self._last_render_mode = render_mode
                mode_name = "–û–ë–´–ß–ù–´–ô –ú–ò–†" if render_mode == "SURFACE" else "–ü–ï–©–ï–†–ê (LayerRenderer)"
                world_name = current_world.world_id if current_world else "None"
                self.log(f"üé® –°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: {mode_name}, –º–∏—Ä: {world_name}, Z: {player_pos.z if player_pos else 0}", "IMPORTANT")

            # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ù–ï –≤ –ø–µ—â–µ—Ä–µ, —Ä–µ–Ω–¥–µ—Ä–∏–º –æ–±—ã—á–Ω—ã–π –º–∏—Ä
            if not player_pos or player_pos.z == 0:
                # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
                self.screen.fill(get_color('BLACK'))
                # –†–µ–Ω–¥–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–∏—Ä —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–∞
                self.world.draw(self.screen, self.player.x, self.player.y)
                # –†–µ–Ω–¥–µ—Ä–∏–º –∏–≥—Ä–æ–∫–∞
                self.player.draw(self.screen, self.world.camera_x, self.world.camera_y)
            else:

                # –í –ø–µ—â–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º LayerRenderer
                dt = self.clock.get_time() / 1000.0
                self.layer_renderer.update(dt)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö —Å–ª–æ–µ–≤
                screen_x = int(player_pos.x - self.layer_renderer.camera_x)
                screen_y = int(player_pos.y - self.layer_renderer.camera_y)

                # –¶–≤–µ—Ç –∏–≥—Ä–æ–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Z-—É—Ä–æ–≤–Ω—è
                color = (255, 200, 100) if player_pos.z == -1 else (100, 255, 100)

                # –†–∏—Å—É–µ–º –∏–≥—Ä–æ–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é
                pygame.draw.circle(self.screen, color, (screen_x, screen_y), 16)
                pygame.draw.circle(self.screen, (255, 255, 255), (screen_x, screen_y), 16, 2)
            
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ UI (–ø–æ–ª–æ—Å–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è)
            self.draw_health_bar()
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if self.show_debug:
                current_world = self.world_manager.get_current_world()
                world_stats = self.world_manager.get_world_stats()
                player_pos = self.player_entity.get_component(PositionComponent) if self.player_entity else None
                
                debug_info = [
                    f"Player: ({int(self.player.x)}, {int(self.player.y)})",
                    f"World: {player_pos.world_id if player_pos else 'None'}",
                    f"Z-Level: {player_pos.z if player_pos else 0}",
                    f"Camera: ({int(self.layer_renderer.camera_x)}, {int(self.layer_renderer.camera_y)})",
                    f"Direction: {self.player.facing_direction}",
                    f"Attacking: {self.player.attacking}",
                    f"FPS: {int(self.clock.get_fps())}",
                    f"Worlds: {world_stats['total_worlds']} total, {world_stats['loaded_worlds']} loaded",
                    "Controls: WASD - Move, Space - Attack, E - Z-transition, P - Portal",
                    "1,2,3 - Switch worlds, F1 - Debug, ESC - Menu"
                ]
                
                y_offset = 10
                for info in debug_info:
                    debug(info, y=y_offset)
                    y_offset += 20
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                current_world = self.world_manager.get_current_world()
                world_name = current_world.world_id if current_world else "Unknown"
                player_pos = self.player_entity.get_component(PositionComponent) if self.player_entity else None
                z_level = player_pos.z if player_pos else 0
                
                debug(f"World: {world_name} | Z-Level: {z_level} | F1 - Debug | ESC - Menu", 
                      y=get_config('HEIGHT') - 50)
                debug("E - Z-transition | P - Portal | 1,2,3 - Switch worlds", 
                      y=get_config('HEIGHT') - 30)
        elif self.state == GameState.GAME_OVER:
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ Game Over
            if self.game_over_screen:
                self.game_over_screen.draw(self.screen)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è
        pygame.display.flip()

    def draw_health_bar(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∏–≥—Ä–æ–∫–∞"""
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
        bar_width = 200
        bar_height = 20
        bar_x = 10
        bar_y = 10
        border_width = 2
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è
        health_percentage = self.player.health / self.player.max_health
        health_bar_width = int(bar_width * health_percentage)
        
        # –†–∏—Å—É–µ–º —Ñ–æ–Ω –ø–æ–ª–æ—Å–∫–∏ (—Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π)
        pygame.draw.rect(self.screen, get_color('DARK_GRAY'), 
                        (bar_x, bar_y, bar_width, bar_height))
        
        # –†–∏—Å—É–µ–º –ø–æ–ª–æ—Å–∫—É –∑–¥–æ—Ä–æ–≤—å—è (–∑–µ–ª–µ–Ω—ã–π)
        if health_bar_width > 0:
            pygame.draw.rect(self.screen, get_color('GREEN'), 
                            (bar_x, bar_y, health_bar_width, bar_height))
        
        # –†–∏—Å—É–µ–º —Ç–æ–Ω–∫—É—é —Ä–∞–º–æ—á–∫—É
        pygame.draw.rect(self.screen, get_color('WHITE'), 
                        (bar_x - border_width, bar_y - border_width, 
                         bar_width + border_width * 2, bar_height + border_width * 2), 
                        border_width)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∑–¥–æ—Ä–æ–≤—å—è
        font = pygame.font.Font(None, 24)
        health_text = f"{int(self.player.health)}/{int(self.player.max_health)}"
        text_surface = font.render(health_text, True, get_color('WHITE'))
        text_x = bar_x + bar_width + 10
        text_y = bar_y + (bar_height - text_surface.get_height()) // 2
        self.screen.blit(text_surface, (text_x, text_y))

    def quicksave(self):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã (F5)"""
        if self.player and self.world:
            success = self.save_system.save_game(self.player, self.world)
            if success:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                print("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! (F5)")
            else:
                print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
        else:
            print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")

    def quickload(self):
        """–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã (F9)"""
        print("\nüíæ [F9] –ü–æ–ø—ã—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã...")

        if not self.save_system.quicksave_exists():
            print("   ‚ùå –§–∞–π–ª –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        print("   ‚úÖ –§–∞–π–ª quicksave.json –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
        save_data = self.save_system.load_game()

        if save_data:
            print(f"   üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {list(save_data.keys())}")

            # –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∏—Ä –∏ –∏–≥—Ä–æ–∫–∞
            if not self.player or not self.world:
                print("   üèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∏—Ä–∞ –∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...")
                self.world = World(width=get_config('WORLD_WIDTH'), height=get_config('WORLD_HEIGHT'))
                # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                self.player = Player(0, 0)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)
            if not self.game_stats:
                print("   üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã...")
                self.game_stats = GameStats()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Game Over —ç–∫—Ä–∞–Ω–∞ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω)
            if not self.game_over_screen:
                print("   üíÄ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ Game Over...")
                self.game_over_screen = GameOverScreen(
                    get_config('WIDTH'), 
                    get_config('HEIGHT'), 
                    self.game_stats
                )

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            print("   üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫ –∏–≥—Ä–æ–∫—É...")
            self.save_system.apply_save_data_to_player(self.player, save_data)
            print(f"      üë§ –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞: ({self.player.x}, {self.player.y})")
            print(f"      üíö –ó–¥–æ—Ä–æ–≤—å–µ: {self.player.health}/{self.player.max_health}")

            print("   üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫ –º–∏—Ä—É...")
            self.save_system.apply_save_data_to_world(self.world, save_data)

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.state = GameState.PLAYING
            print("   ‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! (F9)")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã!")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
        while self.running:
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–¥—Ä–∞
            current_time = pygame.time.get_ticks()
            dt = (current_time - self.last_time) / 1000.0  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–µ–∫—É–Ω–¥—ã
            self.last_time = current_time
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ dt –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            dt = min(dt, 1.0 / 30.0)  # –ú–∞–∫—Å–∏–º—É–º 30 FPS –¥–ª—è —Ñ–∏–∑–∏–∫–∏
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
            self.handle_events()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
            self.update(dt)
            
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞
            self.draw()
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ FPS
            self.clock.tick(get_config('FPS'))
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        self.log("=== –°–ï–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===", "IMPORTANT")
        self.log_file.close()
        pygame.quit()
        sys.exit()

