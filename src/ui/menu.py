import pygame
import os
from src.core.config_loader import get_config, get_color


class MainMenu:
    def __init__(self):
        # –ë–∞–∑–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
        self.base_menu_items = ["–ù–æ–≤–∞—è –∏–≥—Ä–∞"]
        self.selected_index = 0
        self.font = pygame.font.Font(None, 48)
        self.title_font = pygame.font.Font(None, 72)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
        self.update_menu_items()
    
    def has_saves(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π"""
        saves_dir = "saves"
        if not os.path.exists(saves_dir):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—é–±—ã—Ö .json —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ saves
        save_files = [f for f in os.listdir(saves_dir) if f.endswith('.json')]
        return len(save_files) > 0
    
    def has_quicksave(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ quicksave —Ñ–∞–π–ª–∞"""
        return os.path.exists("saves/quicksave.json")
    
    def update_menu_items(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π"""
        self.menu_items = ["–ù–æ–≤–∞—è –∏–≥—Ä–∞"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å quicksave
        if self.has_quicksave():
            self.menu_items.append("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É")
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É" –µ—Å–ª–∏ –µ—Å—Ç—å –ª—é–±—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if self.has_saves():
            self.menu_items.append("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É")
        
        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º "–í—ã—Ö–æ–¥"
        self.menu_items.append("–í—ã—Ö–æ–¥")
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        if self.selected_index >= len(self.menu_items):
            self.selected_index = len(self.menu_items) - 1
    
    def handle_input(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –º–µ–Ω—é"""
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP:
                self.selected_index = (self.selected_index - 1) % len(self.menu_items)
            elif event.key == pygame.K_DOWN:
                self.selected_index = (self.selected_index + 1) % len(self.menu_items)
            elif event.key == pygame.K_RETURN:
                return self.get_selected_action()
        return None
    
    def get_selected_action(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é"""
        if self.selected_index < 0 or self.selected_index >= len(self.menu_items):
            return None
        
        selected_item = self.menu_items[self.selected_index]
        
        if selected_item == "–ù–æ–≤–∞—è –∏–≥—Ä–∞":
            return "new_game"
        elif selected_item == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É":
            return "continue_game"
        elif selected_item == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É":
            return "load_game"
        elif selected_item == "–í—ã—Ö–æ–¥":
            return "exit"
        
        return None
    
    def draw(self, screen):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ–Ω—é"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–µ
        self.update_menu_items()
        
        screen.fill(get_color('BLACK'))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–µ–π
        title_text = self.title_font.render("ZELDA-LIKE GAME", True, get_color('WHITE'))
        title_rect = title_text.get_rect(center=(get_config('WIDTH') // 2, 120))
        screen.blit(title_text, title_rect)
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_font = pygame.font.Font(None, 32)
        subtitle_text = subtitle_font.render("üéÆ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å", True, get_color('GRAY'))
        subtitle_rect = subtitle_text.get_rect(center=(get_config('WIDTH') // 2, 170))
        screen.blit(subtitle_text, subtitle_rect)
        
        # –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–µ–π
        menu_start_y = 250
        for i, item in enumerate(self.menu_items):
            y_pos = menu_start_y + i * 70
            
            # –¶–≤–µ—Ç –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
            if i == self.selected_index:
                color = get_color('YELLOW')
                # –†–∞–º–∫–∞ –≤–æ–∫—Ä—É–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
                menu_rect = pygame.Rect(get_config('WIDTH') // 2 - 150, y_pos - 25, 300, 50)
                pygame.draw.rect(screen, get_color('DARK_GRAY'), menu_rect, 2)
                # –°—Ç—Ä–µ–ª–æ—á–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
                arrow_font = pygame.font.Font(None, 48)
                left_arrow = arrow_font.render("‚ñ∫", True, get_color('YELLOW'))
                right_arrow = arrow_font.render("‚óÑ", True, get_color('YELLOW'))
                screen.blit(left_arrow, (get_config('WIDTH') // 2 - 200, y_pos - 15))
                screen.blit(right_arrow, (get_config('WIDTH') // 2 + 170, y_pos - 15))
            else:
                color = get_color('WHITE')
            
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
            text = self.font.render(item, True, color)
            text_rect = text.get_rect(center=(get_config('WIDTH') // 2, y_pos))
            screen.blit(text, text_rect)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
        instruction_font = pygame.font.Font(None, 24)
        instructions = [
            "‚Üë‚Üì - –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é",
            "Enter - –í—ã–±—Ä–∞—Ç—å",
            "ESC - –í—ã—Ö–æ–¥ (–≤ –∏–≥—Ä–µ - –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é)"
        ]
        
        instruction_y = get_config('HEIGHT') - 80
        for instruction in instructions:
            instruction_text = instruction_font.render(instruction, True, get_color('GRAY'))
            instruction_rect = instruction_text.get_rect(center=(get_config('WIDTH') // 2, instruction_y))
            screen.blit(instruction_text, instruction_rect)
            instruction_y += 25